generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Season {
  summer
  winter
}

enum Category {
  women
  children
}

model Product {
  id String @id @default(cuid())

  name        String           @unique
  description String?
  images      String[]
  price       Float
  variants    ProductVariant[]

  rating       Float
  reviewsCount Int      @default(0)
  reviews      Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id String @id @default(cuid())

  season   Season
  category Category
  stock    Int      @default(0)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id String @id @default(cuid())

  rating Int

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Address {
  id String @id @default(cuid())

  city     String
  region   String
  street   String
  building String
  mark     String?

  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  userId String
}

model User {
  id String @id @default(cuid())

  name     String
  phone    String  @unique
  password String?

  addresses Address[]
  reviews   Review[]

  // TODO: oauth
  // email         String?   @unique
  // emailVerified DateTime?
  // image         String?

  sessions Session[]
  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  accessToken  String?
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}
